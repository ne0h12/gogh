package gogh

import (
	"bytes"
	"os"
	"runtime/debug"

	"github.com/sirkon/errors"
	"github.com/sirkon/message"
)

type renderingOptionsHandler interface {
	// path full file name of a file to be written
	path() string
	// localname local file name within a module of a file to be written
	localPath() string
	// comment file comment writer
	comment() *bytes.Buffer
	// setVals set rendering context values
	setVals(vals map[string]interface{})
}

var (
	_ renderingOptionsHandler = &GoRenderer[*Imports]{}
	_ renderingOptionsHandler = &RawRenderer{}
)

// RendererOption an option to be applied before the rendering
type RendererOption func(r renderingOptionsHandler) bool

// Shy prevents overwrite of existing file
func Shy(r renderingOptionsHandler) bool {
	_, err := os.Stat(r.path())
	if err == nil {
		// file exists
		message.Warning("will not overwrite existing file", r.localPath())
		return false
	}

	if errors.Is(err, os.ErrNotExist) {
		return true
	}

	panic(errors.Wrapf(err, "get file info"))
}

// Autogen puts header `Code generated by <app name> version vX.Y.Z. DO NOT EDIT.`
func Autogen(appname string) RendererOption {
	return func(r renderingOptionsHandler) bool {
		r.comment().WriteString("// Code generated by ")
		r.comment().WriteString(appname)
		r.comment().WriteString(" version ")
		info, ok := debug.ReadBuildInfo()
		if !ok || info.Main.Version == "" {
			r.comment().WriteString("(devel)")
		} else {
			r.comment().WriteString(info.Main.Version)
		}
		r.comment().WriteString(". DO NOT EDIT.\n")

		return true
	}
}

// WithValues puts given named values into the rendering context
func WithValues(vals map[string]interface{}) RendererOption {
	return func(r renderingOptionsHandler) bool {
		r.setVals(vals)
		return true
	}
}

// WithValue shortcut for WithValues with the single named value
func WithValue(name string, value interface{}) RendererOption {
	return func(r renderingOptionsHandler) bool {
		r.setVals(map[string]interface{}{
			name: value,
		})
		return true
	}
}
